#!/usr/bin/env bash
# hotspot - easily fire up and manage wifi hotspots


# wireless_devices: list wireless devices
wireless_devices() {
    ls /sys/class/net | grep wl
}


# ethernet_devices: list ethernet devices
ethernet_devices() {
    ls /sys/class/net | grep en
}


# is_operational: check if a ethernet device is operational
is_operational() {
    local carrier operstate
    carrier=$(cat /sys/class/net/"$1"/carrier)
    operstate=$(cat /sys/class/net/"$1"/operstate)

    if [[ $carrier -eq 1 && $operstate == "up" ]]; then
        true
    else
        false
    fi
}


# is_hotspot_active: check if hotspot is active
is_hotspot_active() {
    nmcli device wifi show-password &> /dev/null
    if [[ $? -eq 0 ]]; then
        true
    else
        false
    fi
}


# has_cabled_connection: check for cabled connection
has_cabled_connection() {
    local cabled_ethernet=false
    for device in $(ethernet_devices); do
        if is_operational "$device"; then
            cabled_ethernet=true
        fi
    done

    $cabled_ethernet
}


# has_internet_connection: check for internet connection
has_internet_connection() {
    wget -q --spider http://google.com
    if [[ $? -eq 0 ]]; then
        true
    else
        false
    fi
}


# get_ssid: print the hotspot ssid
get_ssid() {
    nmcli device wifi show-password | awk 'NR==1 {print $NF}'
}


# get_password: print the hotspot password
get_password() {
    nmcli device wifi show-password | awk 'NR==3 {print $NF}'
}


# start: start the hotspot
start() {
    local ssid="$1"
    local password="$2"

    # make sure that wifi adaptor is enabled
    nmcli radio wifi on

    # if the hotspot is already on, do nothing
    if is_hotspot_active; then
        echo "info: the WiFi hotspot is already on"
        return
    fi

    # start the wifi hotspot
    if [[ $# -eq 0 ]]; then
        nmcli device wifi hotspot &> /dev/null
    elif [[ $# -eq 2 ]]; then
        nmcli device wifi hotspot ssid "$ssid" password "$password" &> /dev/null
    else
        echo "usage: hotspot start <ssid> <password>"
        return
    fi

    # display info on the hotspot, or possibly an error
    if [[ $? -eq 0 ]]; then
        echo "The WiFi hotspot is now on"
        info
    else
        echo "error: couldn't start the WiFi hotspot"
    fi
}


# stop: stop the hotspot
stop() {
    if [[ $# -ne 0 ]]; then
        echo "usage: hotspot stop"
        echo "error: too many arguments"
        return
    fi

    # if hotspot is active, turn it off
    if is_hotspot_active; then
        # switch the wifi interface off and on
        nmcli radio wifi off
        nmcli radio wifi on
    fi
}


# sync: start the hotspot if there's network available,
#       otherwise turn it off
sync() {
    if [[ $# -ne 0 ]]; then
        echo "usage: hotspot sync"
        echo "error: too many arguments"
        return
    fi

    # if there's cabled internet, fire up the hotspot
    if has_cabled_connection && has_internet_connection; then
        start
    else
        stop
        # enable autoconnect to known networks
        for device in $(wireless_devices); do
            nmcli device set "$device" autoconnect yes
        done
    fi

}


# info: print info on the hotspot
info() {
    if [[ $# -ne 0 ]]; then
        echo "usage: hotspot info"
        echo "error: too many arguments"
        return
    fi

    if is_hotspot_active; then
        echo "ssid:     $(get_ssid)"
        echo "password: $(get_password)"
    else
        echo "error: the Wifi hotpost is currently off"
    fi
}


# usage: print usage
usage() {
    cat <<HELP_USAGE
usage: hotspot COMMAND

List of commands :

start           Start a WiFi hotspot
stop            Stop any running WiFi hotspot
info            Print info on the WiFi hotspot
sync            Start a WiFi hotspot if there's cabled internet,
                shut it down otherwise
HELP_USAGE
}


main() {
    local command=$1
    local args="${*:2}"

    case "$command" in
    start)
        start $args
        ;;
    stop)
        stop $args
        ;;
    sync)
        sync $args
        ;;
    info)
        info $args
        ;;
    *)
        usage
        ;;
    esac
}


main "$@"
